"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Calendar, CalendarDays, TrendingUp, Package, Settings, LogOut, Plus, Edit, Trash2, Minus } from "lucide-react"
import { useRouter } from "next/navigation"
import { toast } from "@/hooks/use-toast"

interface MenuItem {
  id: string
  name: string
  description: string
  price: number
  category: string
}

interface Order {
  id: string
  items: any[]
  total: number
  timestamp: string
  employee: string
}

export default function AdminPage() {
  const [user, setUser] = useState<any>(null)
  const [orders, setOrders] = useState<Order[]>([])
  const [menuItems, setMenuItems] = useState<MenuItem[]>([])
  const [ingredients, setIngredients] = useState([
    { name: "–ë—É–ª–æ—á–∫–∏ –¥–ª—è —Ö–æ—Ç-–¥–æ–≥–æ–≤", quantity: 45, unit: "—à—Ç" },
    { name: "–ì–æ–≤—è–∂—å–∏ —Å–æ—Å–∏—Å–∫–∏", quantity: 38, unit: "—à—Ç" },
    { name: "–°—ã—Ä —á–µ–¥–¥–µ—Ä", quantity: 2.5, unit: "–∫–≥" },
    { name: "–ö–µ—Ç—á—É–ø", quantity: 1.2, unit: "–ª" },
    { name: "–ì–æ—Ä—á–∏—Ü–∞", quantity: 0.8, unit: "–ª" },
    { name: "–•–∞–ª–∞–ø–µ–Ω—å–æ", quantity: 0.5, unit: "–∫–≥" },
    { name: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", quantity: 8, unit: "–∫–≥" },
    { name: "–ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ", quantity: 3, unit: "–∫–≥" },
    { name: "–ú–æ—Ü–∞—Ä–µ–ª–ª–∞", quantity: 1.5, unit: "–∫–≥" },
  ])
  const [editingItem, setEditingItem] = useState<MenuItem | null>(null)
  const [newItem, setNewItem] = useState<Partial<MenuItem>>({})
  const [isAddingItem, setIsAddingItem] = useState(false)
  const router = useRouter()

  const initialMenuItems: MenuItem[] = [
    { id: "1", name: "Classic Dog", description: "–ì–æ–≤—è–∂–∏–π —Ö–æ—Ç-–¥–æ–≥, –±—É–ª–æ—á–∫–∞, –∫–µ—Ç—á—É–ø –∏ –≥–æ—Ä—á–∏—Ü–∞", price: 250, category: "hotdogs" },
    { id: "2", name: "Cheese Dog", description: "–ì–æ–≤—è–∂–∏–π —Ö–æ—Ç-–¥–æ–≥, –±—É–ª–æ—á–∫–∞, —Ä–∞—Å–ø–ª–∞–≤–ª–µ–Ω–Ω—ã–π —Å—ã—Ä", price: 290, category: "hotdogs" },
    { id: "3", name: "Spicy Dog", description: "–ì–æ–≤—è–∂–∏–π —Ö–æ—Ç-–¥–æ–≥, –±—É–ª–æ—á–∫–∞, –æ—Å—Ç—Ä—ã–π —Å–æ—É—Å –∏ —Ö–∞–ª–∞–ø–µ–Ω—å–æ", price: 310, category: "hotdogs" },
    { id: "4", name: "Italian Dog", description: "–ì–æ–≤—è–∂–∏–π —Ö–æ—Ç-–¥–æ–≥, –±—É–ª–æ—á–∫–∞, –ø–µ—Å—Ç–æ –∏ –ø–∞—Ä–º–µ–∑–∞–Ω", price: 340, category: "hotdogs" },
    { id: "5", name: "BBQ Crunch Dog", description: "–ì–æ–≤—è–∂–∏–π —Ö–æ—Ç-–¥–æ–≥, –±—É–ª–æ—á–∫–∞, BBQ —Å–æ—É—Å –∏ —Ö—Ä—É—Å—Ç—è—â–∏–π –ª—É–∫", price: 320, category: "hotdogs" },
    { id: "6", name: "Honey Mustard Dog", description: "–ì–æ–≤—è–∂–∏–π —Ö–æ—Ç-–¥–æ–≥, –±—É–ª–æ—á–∫–∞, –º–µ–¥–æ–≤–∞—è –≥–æ—Ä—á–∏—Ü–∞ –∏ —Å–æ–ª–µ–Ω—ã–µ –æ–≥—É—Ä—Ü—ã", price: 300, category: "hotdogs" },
    { id: "7", name: "–ö—É—Ä–∏–Ω—ã–µ –Ω–∞–≥–≥–µ—Ç—Å—ã (6 —à—Ç)", description: "–•—Ä—É—Å—Ç—è—â–∏–µ –∫—É—Ä–∏–Ω—ã–µ –Ω–∞–≥–≥–µ—Ç—Å—ã", price: 180, category: "sides" },
    { id: "8", name: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏", description: "–ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏", price: 120, category: "sides" },
    { id: "9", name: "–ú–æ—Ü–∞—Ä–µ–ª–ª–∞ —Å—Ç–∏–∫—Å (5 —à—Ç)", description: "–ñ–∞—Ä–µ–Ω—ã–µ –ø–∞–ª–æ—á–∫–∏ –º–æ—Ü–∞—Ä–µ–ª–ª—ã", price: 200, category: "sides" },
    { id: "10", name: "Animal Style Fries", description: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏ —Å —Å–æ—É—Å–æ–º –∏ –ª—É–∫–æ–º", price: 160, category: "sides" },
    { id: "11", name: "–ö–æ–ª–∞", description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∫–æ–ª–∞", price: 80, category: "drinks" },
    { id: "12", name: "–ö–æ–ª–∞ –ó–µ—Ä–æ", description: "–ö–æ–ª–∞ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞", price: 80, category: "drinks" },
    { id: "13", name: "–°–ø—Ä–∞–π—Ç", description: "–õ–∏–º–æ–Ω–Ω–æ-–ª–∞–π–º–æ–≤—ã–π –Ω–∞–ø–∏—Ç–æ–∫", price: 80, category: "drinks" },
    { id: "14", name: "Fuse Tea –õ–∏–º–æ–Ω", description: "–ß–∞–π —Å –ª–∏–º–æ–Ω–æ–º", price: 90, category: "drinks" },
    { id: "15", name: "Fuse Tea –ü–µ—Ä—Å–∏–∫", description: "–ß–∞–π —Å –ø–µ—Ä—Å–∏–∫–æ–º", price: 90, category: "drinks" },
    { id: "16", name: "Fuse Tea –ú–∞–Ω–≥–æ", description: "–ß–∞–π —Å –º–∞–Ω–≥–æ", price: 90, category: "drinks" },
  ]

  useEffect(() => {
    const userData = localStorage.getItem("user")
    if (!userData) {
      router.push("/")
      return
    }
    const parsedUser = JSON.parse(userData)
    if (parsedUser.role !== "admin") {
      router.push("/employee")
      return
    }
    setUser(parsedUser)

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏ –º–µ–Ω—é
    const savedOrders = JSON.parse(localStorage.getItem("orders") || "[]")
    const savedMenu = JSON.parse(localStorage.getItem("menuItems") || "[]")
    
    setOrders(savedOrders)
    setMenuItems(savedMenu.length > 0 ? savedMenu : initialMenuItems)
  }, [router])

  useEffect(() => {
    if (menuItems.length > 0) {
      localStorage.setItem("menuItems", JSON.stringify(menuItems))
    }
  }, [menuItems])

  const logout = () => {
    localStorage.removeItem("user")
    router.push("/")
  }

  const updateIngredient = (index: number, newQuantity: number) => {
    const updated = [...ingredients]
    updated[index].quantity = Math.max(0, newQuantity)
    setIngredients(updated)
    toast({
      title: "–ó–∞–ø–∞—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
      description: `${updated[index].name}: ${newQuantity} ${updated[index].unit}`
    })
  }

  const saveMenuItem = () => {
    if (editingItem) {
      setMenuItems(menuItems.map(item => 
        item.id === editingItem.id ? editingItem : item
      ))
      toast({ title: "–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω", description: "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã" })
    } else if (newItem.name && newItem.description && newItem.price && newItem.category) {
      const item: MenuItem = {
        id: Date.now().toString(),
        name: newItem.name,
        description: newItem.description,
        price: newItem.price,
        category: newItem.category
      }
      setMenuItems([...menuItems, item])
      toast({ title: "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω", description: "–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–µ–Ω—é" })
      setNewItem({})
    }
    setEditingItem(null)
    setIsAddingItem(false)
  }

  const deleteMenuItem = (id: string) => {
    setMenuItems(menuItems.filter(item => item.id !== id))
    toast({ title: "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω", description: "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –º–µ–Ω—é" })
  }

  const getCategoryName = (category: string) => {
    const names = {
      hotdogs: "–•–æ—Ç-–¥–æ–≥–∏",
      sides: "–ì–∞—Ä–Ω–∏—Ä—ã", 
      drinks: "–ù–∞–ø–∏—Ç–∫–∏"
    }
    return names[category as keyof typeof names] || category
  }

  const getTotalRevenue = () => {
    return orders.reduce((sum, order) => sum + order.total, 0)
  }

  const getDailyRevenue = () => {
    const today = new Date().toDateString()
    return orders
      .filter(order => new Date(order.timestamp).toDateString() === today)
      .reduce((sum, order) => sum + order.total, 0)
  }

  const getMonthlyRevenue = () => {
    const currentMonth = new Date().getMonth()
    const currentYear = new Date().getFullYear()
    return orders
      .filter(order => {
        const orderDate = new Date(order.timestamp)
        return orderDate.getMonth() === currentMonth && orderDate.getFullYear() === currentYear
      })
      .reduce((sum, order) => sum + order.total, 0)
  }

  if (!user) return null

  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <h1 className="text-xl font-semibold">üå≠ –•–æ—Ç-–¥–æ–≥ –°—Ç–µ–Ω–¥</h1>
              <Badge variant="default" className="ml-3">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</Badge>
            </div>
            <div className="flex items-center gap-4">
              <span className="text-sm text-gray-600">
                –ü—Ä–∏–≤–µ—Ç, {user.name}!
              </span>
              <Button variant="outline" size="sm" onClick={logout}>
                <LogOut className="h-4 w-4 mr-2" />
                –í—ã–π—Ç–∏
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <Tabs defaultValue="stats" className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="stats">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</TabsTrigger>
            <TabsTrigger value="orders">–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</TabsTrigger>
            <TabsTrigger value="menu">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é</TabsTrigger>
            <TabsTrigger value="inventory">–ó–∞–ø–∞—Å—ã</TabsTrigger>
          </TabsList>

          <TabsContent value="stats" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">–î–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</CardTitle>
                  <Calendar className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-green-600">{getDailyRevenue()}‚Çº</div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">–î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü</CardTitle>
                  <CalendarDays className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-blue-600">{getMonthlyRevenue()}‚Çº</div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">–û–±—â–∏–π –¥–æ—Ö–æ–¥</CardTitle>
                  <TrendingUp className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-purple-600">{getTotalRevenue()}‚Çº</div>
                </CardContent>
              </Card>
            </div>

            <Card>
              <CardHeader>
                <CardTitle>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã</CardTitle>
              </CardHeader>
              <CardContent>
                {orders.length === 0 ? (
                  <p className="text-gray-500 text-center py-4">–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
                ) : (
                  <div className="space-y-4">
                    {orders.slice(-5).reverse().map(order => (
                      <div key={order.id} className="border rounded-lg p-4">
                        <div className="flex justify-between items-start mb-2">
                          <div>
                            <p className="font-medium">–ó–∞–∫–∞–∑ #{order.id}</p>
                            <p className="text-sm text-gray-600">–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {order.employee}</p>
                          </div>
                          <div className="text-right">
                            <p className="font-bold text-green-600">{order.total}‚Çº</p>
                            <p className="text-sm text-gray-600">
                              {new Date(order.timestamp).toLocaleString('ru-RU')}
                            </p>
                          </div>
                        </div>
                        <div className="text-sm text-gray-600">
                          {order.items.map(item => `${item.name} x${item.quantity}`).join(', ')}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="orders">
            <Card>
              <CardHeader>
                <CardTitle>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</CardTitle>
                <CardDescription>–í—Å–µ –∑–∞–∫–∞–∑—ã —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π</CardDescription>
              </CardHeader>
              <CardContent>
                {orders.length === 0 ? (
                  <p className="text-gray-500 text-center py-8">–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
                ) : (
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>‚Ññ –ó–∞–∫–∞–∑–∞</TableHead>
                        <TableHead>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</TableHead>
                        <TableHead>–°–æ—Ç—Ä—É–¥–Ω–∏–∫</TableHead>
                        <TableHead>–¢–æ–≤–∞—Ä—ã</TableHead>
                        <TableHead>–°—É–º–º–∞</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {orders.reverse().map(order => (
                        <TableRow key={order.id}>
                          <TableCell>#{order.id}</TableCell>
                          <TableCell>{new Date(order.timestamp).toLocaleString('ru-RU')}</TableCell>
                          <TableCell>{order.employee}</TableCell>
                          <TableCell>
                            <div className="space-y-1">
                              {order.items.map((item, idx) => (
                                <div key={idx} className="text-sm">
                                  {item.name} x{item.quantity}
                                  {item.additions && item.additions.length > 0 && (
                                    <span className="text-gray-500"> (+{item.additions.join(', ')})</span>
                                  )}
                                </div>
                              ))}
                            </div>
                          </TableCell>
                          <TableCell className="font-bold text-green-600">{order.total}‚Çº</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="menu">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span className="flex items-center">
                    <Settings className="h-5 w-5 mr-2" />
                    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é
                  </span>
                </CardTitle>
                <CardContent>
                  <Dialog open={isAddingItem} onOpenChange={setIsAddingItem}>
                    <DialogTrigger asChild>
                      <Button>
                        <Plus className="h-4 w-4 mr-2" />
                        –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
                      </Button>
                    </DialogTrigger>
                    <DialogContent>
                      <DialogHeader>
                        <DialogTitle>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä</DialogTitle>
                      </DialogHeader>
                      <div className="space-y-4">
                        <div>
                          <Label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ</Label>
                          <Input
                            id="name"
                            value={newItem.name || ""}
                            onChange={(e) => setNewItem({...newItem, name: e.target.value})}
                          />
                        </div>
                        <div>
                          <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                          <Input
                            id="description"
                            value={newItem.description || ""}
                            onChange={(e) => setNewItem({...newItem, description: e.target.value})}
                          />
                        </div>
                        <div>
                          <Label htmlFor="price">–¶–µ–Ω–∞ (‚Çº)</Label>
                          <Input
                            id="price"
                            type="number"
                            value={newItem.price || ""}
                            onChange={(e) => setNewItem({...newItem, price: Number(e.target.value)})}
                          />
                        </div>
                        <div>
                          <Label htmlFor="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</Label>
                          <Select value={newItem.category} onValueChange={(value) => setNewItem({...newItem, category: value})}>
                            <SelectTrigger>
                              <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="hotdogs">–•–æ—Ç-–¥–æ–≥–∏</SelectItem>
                              <SelectItem value="sides">–ì–∞—Ä–Ω–∏—Ä—ã</SelectItem>
                              <SelectItem value="drinks">–ù–∞–ø–∏—Ç–∫–∏</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                        <Button onClick={saveMenuItem} className="w-full">
                          –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
                        </Button>
                      </div>
                    </DialogContent>
                  </Dialog>
                </CardContent>
                </CardHeader>
                <CardContent>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>–ù–∞–∑–≤–∞–Ω–∏–µ</TableHead>
                        <TableHead>–û–ø–∏—Å–∞–Ω–∏–µ</TableHead>
                        <TableHead>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</TableHead>
                        <TableHead>–¶–µ–Ω–∞</TableHead>
                        <TableHead>–î–µ–π—Å—Ç–≤–∏—è</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {menuItems.map(item => (
                        <TableRow key={item.id}>
                          <TableCell className="font-medium">{item.name}</TableCell>
                          <TableCell>{item.description}</TableCell>
                          <TableCell>
                            <Badge variant="outline">{getCategoryName(item.category)}</Badge>
                          </TableCell>
                          <TableCell className="font-bold">{item.price}‚Çº</TableCell>
                          <TableCell>
                            <div className="flex gap-2">
                              <Dialog>
                                <DialogTrigger asChild>
                                  <Button 
                                    size="sm" 
                                    variant="outline"
                                    onClick={() => setEditingItem(item)}
                                  >
                                    <Edit className="h-4 w-4" />
                                  </Button>
                                </DialogTrigger>
                                <DialogContent>
                                  <DialogHeader>
                                    <DialogTitle>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä</DialogTitle>
                                  </DialogHeader>
                                  {editingItem && (
                                    <div className="space-y-4">
                                      <div>
                                        <Label htmlFor="editName">–ù–∞–∑–≤–∞–Ω–∏–µ</Label>
                                        <Input
                                          id="editName"
                                          value={editingItem.name}
                                          onChange={(e) => setEditingItem({...editingItem, name: e.target.value})}
                                        />
                                      </div>
                                      <div>
                                        <Label htmlFor="editDescription">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                                        <Input
                                          id="editDescription"
                                          value={editingItem.description}
                                          onChange={(e) => setEditingItem({...editingItem, description: e.target.value})}
                                        />
                                      </div>
                                      <div>
                                        <Label htmlFor="editPrice">–¶–µ–Ω–∞ (‚Çº)</Label>
                                        <Input
                                          id="editPrice"
                                          type="number"
                                          value={editingItem.price}
                                          onChange={(e) => setEditingItem({...editingItem, price: Number(e.target.value)})}
                                        />
                                      </div>
                                      <div>
                                        <Label htmlFor="editCategory">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</Label>
                                        <Select 
                                          value={editingItem.category} 
                                          onValueChange={(value) => setEditingItem({...editingItem, category: value})}
                                        >
                                          <SelectTrigger>
                                            <SelectValue />
                                          </SelectTrigger>
                                          <SelectContent>
                                            <SelectItem value="hotdogs">–•–æ—Ç-–¥–æ–≥–∏</SelectItem>
                                            <SelectItem value="sides">–ì–∞—Ä–Ω–∏—Ä—ã</SelectItem>
                                            <SelectItem value="drinks">–ù–∞–ø–∏—Ç–∫–∏</SelectItem>
                                          </SelectContent>
                                        </Select>
                                      </div>
                                      <Button onClick={saveMenuItem} className="w-full">
                                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                                      </Button>
                                    </div>
                                  )}
                                </DialogContent>
                              </Dialog>
                              <Button 
                                size="sm" 
                                variant="destructive"
                                onClick={() => deleteMenuItem(item.id)}
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="inventory">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Package className="h-5 w-5 mr-2" />
                    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏
                  </CardTitle>
                  <CardDescription>
                    –û–±–Ω–æ–≤–ª—è–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {ingredients.map((ingredient, index) => (
                      <div key={index} className="border rounded-lg p-4">
                        <h3 className="font-medium mb-3">{ingredient.name}</h3>
                        <div className="flex items-center gap-2 mb-3">
                          <Button 
                            size="sm" 
                            variant="outline"
                            onClick={() => updateIngredient(index, ingredient.quantity - 1)}
                          >
                            <Minus className="h-3 w-3" />
                          </Button>
                          <Input
                            type="number"
                            value={ingredient.quantity}
                            onChange={(e) => updateIngredient(index, Number(e.target.value))}
                            className="text-center"
                          />
                          <span className="text-sm text-gray-500 min-w-[30px]">{ingredient.unit}</span>
                          <Button 
                            size="sm" 
                            variant="outline"
                            onClick={() => updateIngredient(index, ingredient.quantity + 1)}
                          >
                            <Plus className="h-3 w-3" />
                          </Button>
                        </div>
                        <Badge 
                          variant={ingredient.quantity > 10 ? "default" : ingredient.quantity > 5 ? "secondary" : "destructive"}
                          className="w-full justify-center"
                        >
                          {ingredient.quantity > 10 ? "–í –Ω–∞–ª–∏—á–∏–∏" : ingredient.quantity > 5 ? "–ú–∞–ª–æ" : "–ö—Ä–∏—Ç–∏—á–Ω–æ –º–∞–ª–æ"}
                        </Badge>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}
