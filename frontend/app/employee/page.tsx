"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Plus, Minus, ShoppingCart, LogOut, Package } from "lucide-react"
import { useRouter } from "next/navigation"
import { toast } from "@/hooks/use-toast"

interface MenuItem {
  id: string
  name: string
  description: string
  price: number
  category: string
}

interface OrderItem extends MenuItem {
  quantity: number
  additions: string[]
}

export default function EmployeePage() {
  const [user, setUser] = useState<any>(null)
  const [cart, setCart] = useState<OrderItem[]>([])
  const [total, setTotal] = useState(0)
  const router = useRouter()

  const menuItems: MenuItem[] = [
    // –•–æ—Ç-–¥–æ–≥–∏
    {
      id: "1",
      name: "Classic Dog",
      description: "–ì–æ–≤—è–∂–∏–π —Ö–æ—Ç-–¥–æ–≥, –±—É–ª–æ—á–∫–∞, –∫–µ—Ç—á—É–ø –∏ –≥–æ—Ä—á–∏—Ü–∞",
      price: 250,
      category: "hotdogs",
    },
    {
      id: "2",
      name: "Cheese Dog",
      description: "–ì–æ–≤—è–∂–∏–π —Ö–æ—Ç-–¥–æ–≥, –±—É–ª–æ—á–∫–∞, —Ä–∞—Å–ø–ª–∞–≤–ª–µ–Ω–Ω—ã–π —Å—ã—Ä",
      price: 290,
      category: "hotdogs",
    },
    {
      id: "3",
      name: "Spicy Dog",
      description: "–ì–æ–≤—è–∂–∏–π —Ö–æ—Ç-–¥–æ–≥, –±—É–ª–æ—á–∫–∞, –æ—Å—Ç—Ä—ã–π —Å–æ—É—Å –∏ —Ö–∞–ª–∞–ø–µ–Ω—å–æ",
      price: 310,
      category: "hotdogs",
    },
    {
      id: "4",
      name: "Italian Dog",
      description: "–ì–æ–≤—è–∂–∏–π —Ö–æ—Ç-–¥–æ–≥, –±—É–ª–æ—á–∫–∞, –ø–µ—Å—Ç–æ –∏ –ø–∞—Ä–º–µ–∑–∞–Ω",
      price: 340,
      category: "hotdogs",
    },
    {
      id: "5",
      name: "BBQ Crunch Dog",
      description: "–ì–æ–≤—è–∂–∏–π —Ö–æ—Ç-–¥–æ–≥, –±—É–ª–æ—á–∫–∞, BBQ —Å–æ—É—Å –∏ —Ö—Ä—É—Å—Ç—è—â–∏–π –ª—É–∫",
      price: 320,
      category: "hotdogs",
    },
    {
      id: "6",
      name: "Honey Mustard Dog",
      description: "–ì–æ–≤—è–∂–∏–π —Ö–æ—Ç-–¥–æ–≥, –±—É–ª–æ—á–∫–∞, –º–µ–¥–æ–≤–∞—è –≥–æ—Ä—á–∏—Ü–∞ –∏ —Å–æ–ª–µ–Ω—ã–µ –æ–≥—É—Ä—Ü—ã",
      price: 300,
      category: "hotdogs",
    },

    // –ì–∞—Ä–Ω–∏—Ä—ã
    {
      id: "7",
      name: "–ö—É—Ä–∏–Ω—ã–µ –Ω–∞–≥–≥–µ—Ç—Å—ã (6 —à—Ç)",
      description: "–•—Ä—É—Å—Ç—è—â–∏–µ –∫—É—Ä–∏–Ω—ã–µ –Ω–∞–≥–≥–µ—Ç—Å—ã",
      price: 180,
      category: "sides",
    },
    { id: "8", name: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏", description: "–ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏", price: 120, category: "sides" },
    {
      id: "9",
      name: "–ú–æ—Ü–∞—Ä–µ–ª–ª–∞ —Å—Ç–∏–∫—Å (5 —à—Ç)",
      description: "–ñ–∞—Ä–µ–Ω—ã–µ –ø–∞–ª–æ—á–∫–∏ –º–æ—Ü–∞—Ä–µ–ª–ª—ã",
      price: 200,
      category: "sides",
    },
    {
      id: "10",
      name: "Animal Style Fries",
      description: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏ —Å —Å–æ—É—Å–æ–º –∏ –ª—É–∫–æ–º",
      price: 160,
      category: "sides",
    },

    // –ù–∞–ø–∏—Ç–∫–∏
    { id: "11", name: "–ö–æ–ª–∞", description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∫–æ–ª–∞", price: 80, category: "drinks" },
    { id: "12", name: "–ö–æ–ª–∞ –ó–µ—Ä–æ", description: "–ö–æ–ª–∞ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞", price: 80, category: "drinks" },
    { id: "13", name: "–°–ø—Ä–∞–π—Ç", description: "–õ–∏–º–æ–Ω–Ω–æ-–ª–∞–π–º–æ–≤—ã–π –Ω–∞–ø–∏—Ç–æ–∫", price: 80, category: "drinks" },
    { id: "14", name: "Fuse Tea –õ–∏–º–æ–Ω", description: "–ß–∞–π —Å –ª–∏–º–æ–Ω–æ–º", price: 90, category: "drinks" },
    { id: "15", name: "Fuse Tea –ü–µ—Ä—Å–∏–∫", description: "–ß–∞–π —Å –ø–µ—Ä—Å–∏–∫–æ–º", price: 90, category: "drinks" },
    { id: "16", name: "Fuse Tea –ú–∞–Ω–≥–æ", description: "–ß–∞–π —Å –º–∞–Ω–≥–æ", price: 90, category: "drinks" },
  ]

  const additions = [
    { name: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—ã—Ä", price: 30 },
    { name: "–•–∞–ª–∞–ø–µ–Ω—å–æ", price: 20 },
    { name: "–•—Ä—É—Å—Ç—è—â–∏–π –ª—É–∫", price: 25 },
    { name: "–°–æ–ª–µ–Ω—ã–µ –æ–≥—É—Ä—Ü—ã", price: 15 },
    { name: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–æ—É—Å", price: 20 },
    { name: "–î–≤–æ–π–Ω–æ–π —Ö–æ—Ç-–¥–æ–≥", price: 100 },
  ]

  const ingredients = [
    { name: "–ë—É–ª–æ—á–∫–∏ –¥–ª—è —Ö–æ—Ç-–¥–æ–≥–æ–≤", quantity: 45, unit: "—à—Ç" },
    { name: "–ì–æ–≤—è–∂—å–∏ —Å–æ—Å–∏—Å–∫–∏", quantity: 38, unit: "—à—Ç" },
    { name: "–°—ã—Ä —á–µ–¥–¥–µ—Ä", quantity: 2.5, unit: "–∫–≥" },
    { name: "–ö–µ—Ç—á—É–ø", quantity: 1.2, unit: "–ª" },
    { name: "–ì–æ—Ä—á–∏—Ü–∞", quantity: 0.8, unit: "–ª" },
    { name: "–•–∞–ª–∞–ø–µ–Ω—å–æ", quantity: 0.5, unit: "–∫–≥" },
    { name: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", quantity: 8, unit: "–∫–≥" },
    { name: "–ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ", quantity: 3, unit: "–∫–≥" },
    { name: "–ú–æ—Ü–∞—Ä–µ–ª–ª–∞", quantity: 1.5, unit: "–∫–≥" },
  ]

  useEffect(() => {
    const userData = localStorage.getItem("user")
    if (!userData) {
      router.push("/")
      return
    }
    setUser(JSON.parse(userData))
  }, [router])

  useEffect(() => {
    const newTotal = cart.reduce((sum, item) => {
      const additionsTotal = item.additions.reduce((addSum, addName) => {
        const addition = additions.find((a) => a.name === addName)
        return addSum + (addition?.price || 0)
      }, 0)
      return sum + (item.price + additionsTotal) * item.quantity
    }, 0)
    setTotal(newTotal)
  }, [cart])

  const addToCart = (item: MenuItem) => {
    const existingItem = cart.find((cartItem) => cartItem.id === item.id)
    if (existingItem) {
      setCart(
        cart.map((cartItem) => (cartItem.id === item.id ? { ...cartItem, quantity: cartItem.quantity + 1 } : cartItem)),
      )
    } else {
      setCart([...cart, { ...item, quantity: 1, additions: [] }])
    }
  }

  const updateQuantity = (id: string, change: number) => {
    setCart(
      cart
        .map((item) => {
          if (item.id === id) {
            const newQuantity = Math.max(0, item.quantity + change)
            return newQuantity === 0 ? null : { ...item, quantity: newQuantity }
          }
          return item
        })
        .filter(Boolean) as OrderItem[],
    )
  }

  const toggleAddition = (itemId: string, additionName: string) => {
    setCart(
      cart.map((item) => {
        if (item.id === itemId) {
          const hasAddition = item.additions.includes(additionName)
          return {
            ...item,
            additions: hasAddition
              ? item.additions.filter((a) => a !== additionName)
              : [...item.additions, additionName],
          }
        }
        return item
      }),
    )
  }

  const submitOrder = () => {
    if (cart.length === 0) {
      toast({
        title: "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
        description: "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑",
        variant: "destructive",
      })
      return
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ localStorage –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const orders = JSON.parse(localStorage.getItem("orders") || "[]")
    const newOrder = {
      id: Date.now().toString(),
      items: cart,
      total,
      timestamp: new Date().toISOString(),
      employee: user.firstName + " " + user.lastName,
    }
    orders.push(newOrder)
    localStorage.setItem("orders", JSON.stringify(orders))

    toast({
      title: "–ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω",
      description: `–ó–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É ${total}‚Çº —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`,
    })
    setCart([])
  }

  const logout = () => {
    localStorage.removeItem("user")
    router.push("/")
  }

  const getCategoryName = (category: string) => {
    const names = {
      hotdogs: "–•–æ—Ç-–¥–æ–≥–∏",
      sides: "–ì–∞—Ä–Ω–∏—Ä—ã",
      drinks: "–ù–∞–ø–∏—Ç–∫–∏",
    }
    return names[category as keyof typeof names] || category
  }

  if (!user) return null

  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <h1 className="text-xl font-semibold">üå≠ –•–æ—Ç-–¥–æ–≥ –°—Ç–µ–Ω–¥</h1>
              <Badge variant="secondary" className="ml-3">
                –°–æ—Ç—Ä—É–¥–Ω–∏–∫
              </Badge>
            </div>
            <div className="flex items-center gap-4">
              <span className="text-sm text-gray-600">–ü—Ä–∏–≤–µ—Ç, {user.firstName}!</span>
              <Button variant="outline" size="sm" onClick={logout}>
                <LogOut className="h-4 w-4 mr-2" />
                –í—ã–π—Ç–∏
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <Tabs defaultValue="menu" className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="menu">–ú–µ–Ω—é –∏ –∑–∞–∫–∞–∑—ã</TabsTrigger>
            <TabsTrigger value="inventory">–ó–∞–ø–∞—Å—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤</TabsTrigger>
          </TabsList>

          <TabsContent value="menu" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <div className="lg:col-span-2 space-y-6">
                {["hotdogs", "sides", "drinks"].map((category) => (
                  <Card key={category}>
                    <CardHeader>
                      <CardTitle>{getCategoryName(category)}</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {menuItems
                          .filter((item) => item.category === category)
                          .map((item) => (
                            <div key={item.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                              <div className="flex justify-between items-start mb-2">
                                <h3 className="font-medium">{item.name}</h3>
                                <span className="font-bold text-green-600">{item.price}‚Çº</span>
                              </div>
                              <p className="text-sm text-gray-600 mb-3">{item.description}</p>
                              <Button onClick={() => addToCart(item)} size="sm" className="w-full">
                                <Plus className="h-4 w-4 mr-2" />
                                –î–æ–±–∞–≤–∏—Ç—å
                              </Button>
                            </div>
                          ))}
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>

              <div className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center">
                      <ShoppingCart className="h-5 w-5 mr-2" />
                      –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    {cart.length === 0 ? (
                      <p className="text-gray-500 text-center py-4">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
                    ) : (
                      <div className="space-y-4">
                        {cart.map((item) => (
                          <div key={item.id} className="border-b pb-4 last:border-b-0">
                            <div className="flex justify-between items-start mb-2">
                              <h4 className="font-medium text-sm">{item.name}</h4>
                              <span className="font-bold text-green-600">
                                {(item.price +
                                  item.additions.reduce((sum, addName) => {
                                    const addition = additions.find((a) => a.name === addName)
                                    return sum + (addition?.price || 0)
                                  }, 0)) *
                                  item.quantity}
                                ‚Çº
                              </span>
                            </div>

                            <div className="flex items-center gap-2 mb-2">
                              <Button size="sm" variant="outline" onClick={() => updateQuantity(item.id, -1)}>
                                <Minus className="h-3 w-3" />
                              </Button>
                              <span className="font-medium">{item.quantity}</span>
                              <Button size="sm" variant="outline" onClick={() => updateQuantity(item.id, 1)}>
                                <Plus className="h-3 w-3" />
                              </Button>
                            </div>

                            {item.category === "hotdogs" && (
                              <div className="space-y-1">
                                <p className="text-xs font-medium text-gray-700">–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</p>
                                <div className="flex flex-wrap gap-1">
                                  {additions.map((addition) => (
                                    <Badge
                                      key={addition.name}
                                      variant={item.additions.includes(addition.name) ? "default" : "outline"}
                                      className="cursor-pointer text-xs"
                                      onClick={() => toggleAddition(item.id, addition.name)}
                                    >
                                      {addition.name} (+{addition.price}‚Çº)
                                    </Badge>
                                  ))}
                                </div>
                              </div>
                            )}
                          </div>
                        ))}

                        <Separator />
                        <div className="flex justify-between items-center font-bold text-lg">
                          <span>–ò—Ç–æ–≥–æ:</span>
                          <span className="text-green-600">{total}‚Çº</span>
                        </div>

                        <Button onClick={submitOrder} className="w-full" size="lg">
                          –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑
                        </Button>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="inventory">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Package className="h-5 w-5 mr-2" />
                  –ó–∞–ø–∞—Å—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
                </CardTitle>
                <CardDescription>–¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä)</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {ingredients.map((ingredient, index) => (
                    <div key={index} className="border rounded-lg p-4">
                      <h3 className="font-medium mb-2">{ingredient.name}</h3>
                      <div className="flex justify-between items-center">
                        <span className="text-2xl font-bold text-blue-600">{ingredient.quantity}</span>
                        <span className="text-gray-500">{ingredient.unit}</span>
                      </div>
                      <div className="mt-2">
                        <Badge
                          variant={
                            ingredient.quantity > 10 ? "default" : ingredient.quantity > 5 ? "secondary" : "destructive"
                          }
                        >
                          {ingredient.quantity > 10 ? "–í –Ω–∞–ª–∏—á–∏–∏" : ingredient.quantity > 5 ? "–ú–∞–ª–æ" : "–ö—Ä–∏—Ç–∏—á–Ω–æ –º–∞–ª–æ"}
                        </Badge>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}
